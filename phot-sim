#!/usr/bin/env python

import copy
import os

import numpy as np
import sncosmo
from astropy.time import Time
from astropy.table import Table
from scipy.stats import norm, expon
from tqdm import tqdm

import dm15source  # register dm15 source

# register bandpasses
bandnames = ['f184', 'h158', 'j129', 'y106', 'z087']
for name in bandnames:
    band = sncosmo.read_bandpass('bandpasses/{}.txt'.format(name), name=name)
    sncosmo.register(band, name=name)


def plot_bands(fname):
    from matplotlib import pyplot as plt

    for name in bandnames:
        band = sncosmo.get_bandpass(name)
        plt.plot(band.wave, band.trans, label=name)
    plt.legend()
    plt.savefig(fname)
    plt.close()
    plt.clf()


def write_lc_psnid(fname, time, band, flux, fluxerr, meta=None):
    """Write a light curve in a format that PSNID can read."""
    
    with open(fname, 'w') as f:
        if meta is not None:
            for key, val in meta.items():
                f.write("{}: {}\n".format(key, val))

        f.write("MJD     FILTER    FLUX    FLUXERR\n")
        for i in range(len(time)):
            f.write("{} {} {} {}\n"
                    .format(time[i], band[i], flux[i], fluxerr[i]))


def generate_observations():
    """Stub for extremely simple WFIRST observations.

    Returns
    -------
    time : ndarray
    band : ndarray
    zp : float
    zpsys : str
    skynoise : float
    gain : float

    """

    # observation parameters
    t_min, t_max = 60310.0, 61041.0 # 2024-01-01, 2026-01-01
    zp = 33.5
    zpsys = 'ab'
    skynoise = 213.0  # set so that max S/N = 10 for Ia with
                      # z=1.7, M_B = -19.3 (vega) for zp = 33.5
    epochs = np.arange(t_min, t_max, 5.0)  # 5 day cadence
    time = np.ravel(epochs[:, None] + np.array([0., 0.2, 0.4, 0.6, 0.8]))
    band = np.array(len(epochs) * bandnames)
    gain = 1.0

    return time, band, zp, zpsys, skynoise, gain


def runsim(outdir, thresh=6.0):

    if not os.path.exists(outdir):
        os.mkdir(outdir)

    # SN rate in #/(yr Mpc^3)
    def sn1a_rate(z):
        return (0.25e-4 + 0.75e-4 * z) if z < 1.0 else 1e-4

    def sncc_rate(z):
        """artificially boosted"""
        if z <= 2.0:
            return 1.e-4 + 1.e-4 * (1.0 + z)**2
        else:
            return sncc_rate(2.0)

    # distribution for CC host dust
    hostebv_dist = expon(scale=0.15)

    # SN Ia absolute magnitude correlation
    alpha = 1.3
    beta = 2.3
    def absmag_offset(d):
        return -alpha * d['x1'] + beta * d['c']

    # SN model parameters
    sn_types = {
        #'Ia': {'sources': ['salt2-extended'],
        #       'add_dust': False,
        #       'absmag_dist': norm(-19.3, 0.17),
        #       'param_dists': {'c': norm(0., 0.12),
        #                       'x1': norm(0., 1.0)},
        #       'absmag_offset': absmag_offset,
        #       'rate': sn1a_rate,
        #       'absmag_band': 'bessellb'},
        'Ia': {'sources': ['dm15'],
               'add_dust': True,
               'absmag_dist': norm(-19.32, 0.17),
               'param_dists': {'dm15': norm(1.1, 0.3),
                               'hostebv': expon(scale=0.129)},  # tau = 0.4/3.1
               'rate': sn1a_rate,
               'absmag_band': 'bessellb'},
        'Ib': {'sources': ['s11-2005hl', 's11-2005hm', 's11-2006jo',
                          'snana-2004gv', 'snana-2006ep', 'snana-2007y',
                          'snana-2004ib', 'snana-2005hm', 'snana-2006jo',
                          'snana-2007nc'],
               'add_dust': True,
               'absmag_dist': norm(-17.90, 0.80),
               'param_dists': {'hostebv': hostebv_dist},
               'rate': lambda z: 0.1 * sncc_rate(z)},
        'Ic': {'sources': ['s11-2006fo', 'snana-2004fe', 'snana-2004gq',
                           'snana-sdss004012', 'snana-2006fo',
                           'snana-sdss014475', 'snana-2006lc', 'snana-04d1la',
                           'snana-04d4jv'],
               'add_dust': True,
               'absmag_dist': norm(-18.30, 0.60),
               'param_dists': {'hostebv': hostebv_dist},
               'rate': lambda z: 0.1 * sncc_rate(z)},
        'IcBL': {'sources': ['nugent-hyper'],
                 'add_dust': True,
                 'absmag_dist': norm(-17.90, 0.80),
                 'param_dists': {'hostebv': hostebv_dist},
                 'rate': lambda z: 0.02 * sncc_rate(z)},
        'II-P': {'sources': ['s11-2005lc', 's11-2005gi', 's11-2006jl',
                             'snana-2004hx', 'snana-2005gi', 'snana-2006gq',
                             'snana-2006kn', 'snana-2006jl', 'snana-2006iw',
                             'snana-2006kv', 'snana-2006ns', 'snana-2007iz',
                             'snana-2007nr', 'snana-2007kw', 'snana-2007ky',
                             'snana-2007lj', 'snana-2007lb', 'snana-2007ll',
                             'snana-2007nw', 'snana-2007ld', 'snana-2007md',
                             'snana-2007lz', 'snana-2007lx', 'snana-2007og',
                             'snana-2007ny', 'snana-2007nv', 'snana-2007pg'],
                 'add_dust': True,
                 'absmag_dist': norm(-16.56, 0.80),
                 'param_dists': {'hostebv': hostebv_dist},
                 'rate': lambda z: 0.63 * sncc_rate(z)},
        'II-L': {'sources': ['s11-2004hx', 'snana-2007ms'],
                 'add_dust': True,
                 'absmag_dist': norm(-17.66, 0.42),
                 'param_dists': {'hostebv': hostebv_dist},
                 'rate': lambda z: 0.05 * sncc_rate(z)},
        'IIn': {'sources': ['nugent-sn2n', 'snana-2006ez', 'snana-2006ix'],
                'add_dust': True,
                'absmag_dist': norm(-18.25, 1.0),
                'param_dists': {'hostebv': hostebv_dist},
                'rate': lambda z: 0.1 * sncc_rate(z)}
    }

    # construct models
    dust = sncosmo.F99Dust()
    for name, sn_type in sn_types.items():
        sn_type['models'] = []
        for source in sn_type['sources']:
            if sn_type['add_dust']:
                model = sncosmo.Model(source=source,
                                      effects=[dust],
                                      effect_frames=['rest'],
                                      effect_names=['host'])
            else:
                model = sncosmo.Model(source=source)
            sn_type['models'].append(model)


    # generate observations
    time, band, zp, zpsys, skynoise, gain = generate_observations()

    t_min, t_max = time.min(), time.max()
    
    # redshifts of all SNe (this determines total number of SNe as well)
    zdist = sncosmo.zdist(0.5, 2.5, area=8.0, time=(t_max - t_min),
                          ratefunc=lambda z: sn1a_rate(z) + sncc_rate(z))

    type_names = list(sn_types.keys())
    snid = 0  # running snid
    for z in tqdm(list(zdist)):

        # get rate of all types at this redshift
        rates = [sn_types[name]['rate'](z) for name in type_names]
        ratesum = sum(rates)

        # choose a type based on the rates
        name = np.random.choice(type_names, p=[rate/ratesum for rate in rates])
        sn_type = sn_types[name]

        # choose a model within this type (equally weighted)
        # [copy to maintain parameters of the original]
        model = copy.copy(np.random.choice(sn_type['models']))

        # set z and t0
        # TODO: consider model.[mintime,maxtime]() when setting this.
        model.set(z=z, t0=np.random.uniform(t_min, t_max))

        # set amplitude
        absmag = sn_type['absmag_dist'].rvs()
        #absmag += sn_type.get('absmag_corr', lambda x: 0.0)(params)
        absmag_band = sn_type.get('absmag_band', 'bessellr')
        model.set_source_peakabsmag(absmag, absmag_band, 'vega')

        # Set other parameters.
        # we would normally do this *before* setting amplitude, so that the
        # absolute magnitude is correct after setting c, x1 (for SALT).
        # however, for the dm15 model, the absolute magnitude should be set
        # for the fiducial value of dm15=1.1, *not* for whatever value it
        # actually assumes for each SN. (The amplitude-dm15 correlation is
        # built into the model.)
        # Hence the commented-out "absmag += ..." line above.
        params = {}
        for param_name, dist in sn_type['param_dists'].items():
            params[param_name] = dist.rvs()
        model.set(**params)

        # don't generate points for times after model.maxtime()
        mask = time < model.maxtime()
        ptime = time[mask]
        pband = band[mask]

        # generate light curve
        flux = model.bandflux(pband, ptime, zp=zp, zpsys=zpsys)

        # errors and scatter fluxes
        fluxerr = np.sqrt(skynoise**2 + np.abs(flux) / gain)
        flux = np.random.normal(flux, fluxerr)

        # check if any fluxes are significant
        if thresh is not None and not np.any(flux / fluxerr > thresh):
            continue

        # save this LC
        meta = {'REDSHIFT': z, 'TYPE': name, 'SUBTYPE': model.source.name,
                'absmag': absmag}
        meta.update(params)
        write_lc_psnid("{}/lc{:06d}.dat".format(outdir, snid),
                       ptime, pband, flux, fluxerr, meta=meta)
        snid += 1  # incremend snid counter


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('outdir', nargs='?', default='lcs',
                        help='desination directory for generated light curves')
    parser.add_argument('--plotbands', help='Plot bands to this file')
    args = parser.parse_args()

    # if no optional arguments, run the simulation
    if args.plotbands is None:
        runsim(args.outdir)
    else:
        if args.plotbands is not None:
            plot_bands(args.plotbands)
